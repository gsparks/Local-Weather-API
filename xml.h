
/*
Little XML library for C

Make XML tags with XML_tag()

XML my_xml = XML_tag("tag-name",
	"attr-name-1", "attr-value-1",
	"attr-name-2", "attr-value-2",
	NULL,  // Done with attributes
	"Some text & stuff in the tag",
	XML_tag("child-tag",
		NULL,  // No attributes
		NULL  // No children
	),
	NULL // Done with children
)
As you see, you give the name of the tag as the first argument, followed by
pairs of strings for each attribute and each value.  Then give NULL to signify
the end of the attributes.  Then give the children of the tag, which are
either strings (plain text outside of tags) or more XML tags.  Finish with
NULL to signify the end of children.  Do not escape ampersands, angle brackets,
and quotes in the strings you give to this function.

You can turn the XML into a string with XML_as_text()
const char* text = XML_as_text(my_xml);
which give you a string containing:
<tag-name attr-name-1="attr-value-1" attr-name-2="attr-value-2">Some text &amp; stuff in the tag<child-tag/></tag-name>


You can find a tag that is a child of another tag by name with XML_get_child()
XML child = XML_get_child(my_xml, "child-tag")  // Yields <child-tag/>

You can get the value of an attribute of a tag by name with XML_get_attr()
const char* val = XML_get_attr(my_xml, "attr-name-2")  // Yields "attr-value-2"


You can parse an XML string with XML_parse()
XML parsed = XML_parse("<wwxtp><query><command>TEST</command><position lat=\"23.01515\" long=\"-15.132\"/></query></wwxtp>");
After that, you must check that the parse succeeded.
if (!XML_is_valid(parsed)) {
	fprintf(stderr, "Syntax error in XML.\n");
	send_error_message();
}


BUGS: Giving an empty string as one of the children in XML_tag will confuse
 the parser, since it'll think it's an XML tag.  It's not possible to work
 around this without changing the interface to something less user-friendly.


*/

 // more convenient names
typedef unsigned int uint;
typedef union XML XML;

 // A name=value pair
typedef struct XML_Attr {
	const char* name;
	const char* value;
} XML_Attr;

 // All the info you need about an XML tag.
typedef struct XML_Tag {
	uint is_str;  // This is 0 if it's actually a tag
	const char* name;
	uint n_attrs;
	XML_Attr* attrs;
	uint n_contents;
	XML* contents;
} XML_Tag;

 // Using a union type for this allows you to use a string literal in place
 // of an XML object (it should not be xml_escape()d first).  However, it
 // is likely to confuse the system if you give it an empty string.
union XML {
	XML_Tag* tag;
	const char* str;
};

 // Returns true if the XML object is actually a string.
 // To get the string, just cast to (const char*)
uint XML_is_str (XML);

 // Several XML operations return NULL when they fail.  This
 // checks for that without you having to unwrap the union.
uint XML_is_valid (XML);

 // Calculates the length of the string that XML_as_text would return.
uint XML_strlen (XML);

 // Replace < with &lt;, etc.
const char* XML_escape (const char*);
 // Replace &lt; with <, etc.
const char* XML_unescape (const char*);

 // Return the textual representation of the XML tree.
 // If the given XML is actually a string, this is the same as XML_escape.
const char* XML_as_text (XML);

 // Get the value of a tag's attribute with the given name.
 // This doesn't check in case the XML is a string.
const char* XML_get_attr (XML, const char*);

 // Get an immediate child of the XML tag by name.
 // If there's more than one, it gets the first.
XML XML_get_child (XML, const char*);

 // Build an XML tag out of its constituent parts.
 // First give the name (a string), then give a list of attributes
 // (as pairs of strings).  Then NULL to terminate the attributes.
 // Then give a list of children, each of which is a string or an XML (which
 // can be generated by a nested call to XML_tag.  Then give NULL to end
 // the list of children.  Thus every call to XML_tag must have two NULLs.
XML XML_tag (const char* name, ...);

 // Parse a null-terminated XML string into an XML object.
 // Returns an invalid XML object on failure.  Use XML_is_valid to detect this.
XML XML_parse (const char* p);
 // Parse an n-character long string (or the first n characters).
 // Must still be a valid XML document in the end.
XML XML_parse_n (const char* p, uint n);
 // This gives the position in the string at which the last failed parse failed.
extern uint XML_failspot;


